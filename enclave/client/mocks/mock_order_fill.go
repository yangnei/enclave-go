// Code generated by MockGen. DO NOT EDIT.
// Source: enclave/client/order_fill.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "github.com/yangnei/enclave-go/enclave/api"
	model "github.com/yangnei/enclave-go/enclave/model"
)

// MockOrderFillClient is a mock of OrderFillClient interface.
type MockOrderFillClient struct {
	ctrl     *gomock.Controller
	recorder *MockOrderFillClientMockRecorder
}

// MockOrderFillClientMockRecorder is the mock recorder for MockOrderFillClient.
type MockOrderFillClientMockRecorder struct {
	mock *MockOrderFillClient
}

// NewMockOrderFillClient creates a new mock instance.
func NewMockOrderFillClient(ctrl *gomock.Controller) *MockOrderFillClient {
	mock := &MockOrderFillClient{ctrl: ctrl}
	mock.recorder = &MockOrderFillClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderFillClient) EXPECT() *MockOrderFillClientMockRecorder {
	return m.recorder
}

// AddOrder mocks base method.
func (m *MockOrderFillClient) AddOrder(req *api.AddOrderRequest) (*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrder", req)
	ret0, _ := ret[0].(*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddOrder indicates an expected call of AddOrder.
func (mr *MockOrderFillClientMockRecorder) AddOrder(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrder", reflect.TypeOf((*MockOrderFillClient)(nil).AddOrder), req)
}

// CancelOrder mocks base method.
func (m *MockOrderFillClient) CancelOrder(req *api.CancelOrderRequest) (*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelOrder", req)
	ret0, _ := ret[0].(*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelOrder indicates an expected call of CancelOrder.
func (mr *MockOrderFillClientMockRecorder) CancelOrder(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelOrder", reflect.TypeOf((*MockOrderFillClient)(nil).CancelOrder), req)
}

// CancelOrders mocks base method.
func (m *MockOrderFillClient) CancelOrders(req *api.CancelOrdersRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelOrders", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelOrders indicates an expected call of CancelOrders.
func (mr *MockOrderFillClientMockRecorder) CancelOrders(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelOrders", reflect.TypeOf((*MockOrderFillClient)(nil).CancelOrders), req)
}

// GetDepth mocks base method.
func (m *MockOrderFillClient) GetDepth(req *api.GetDepthRequest) (*model.OrderBook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDepth", req)
	ret0, _ := ret[0].(*model.OrderBook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDepth indicates an expected call of GetDepth.
func (mr *MockOrderFillClientMockRecorder) GetDepth(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDepth", reflect.TypeOf((*MockOrderFillClient)(nil).GetDepth), req)
}

// GetFills mocks base method.
func (m *MockOrderFillClient) GetFills(req *api.GetFillsRequest) ([]*model.Fill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFills", req)
	ret0, _ := ret[0].([]*model.Fill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFills indicates an expected call of GetFills.
func (mr *MockOrderFillClientMockRecorder) GetFills(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFills", reflect.TypeOf((*MockOrderFillClient)(nil).GetFills), req)
}

// GetFillsByID mocks base method.
func (m *MockOrderFillClient) GetFillsByID(req *api.GetFillsByIDRequest) ([]*model.Fill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFillsByID", req)
	ret0, _ := ret[0].([]*model.Fill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFillsByID indicates an expected call of GetFillsByID.
func (mr *MockOrderFillClientMockRecorder) GetFillsByID(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFillsByID", reflect.TypeOf((*MockOrderFillClient)(nil).GetFillsByID), req)
}

// GetFillsCSV mocks base method.
func (m *MockOrderFillClient) GetFillsCSV(req *api.GetFillsCSVRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFillsCSV", req)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFillsCSV indicates an expected call of GetFillsCSV.
func (mr *MockOrderFillClientMockRecorder) GetFillsCSV(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFillsCSV", reflect.TypeOf((*MockOrderFillClient)(nil).GetFillsCSV), req)
}

// GetOrder mocks base method.
func (m *MockOrderFillClient) GetOrder(req *api.GetOrderRequest) (*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", req)
	ret0, _ := ret[0].(*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockOrderFillClientMockRecorder) GetOrder(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockOrderFillClient)(nil).GetOrder), req)
}

// GetOrders mocks base method.
func (m *MockOrderFillClient) GetOrders(req *api.GetOrdersRequest) (*api.GetOrdersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", req)
	ret0, _ := ret[0].(*api.GetOrdersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockOrderFillClientMockRecorder) GetOrders(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockOrderFillClient)(nil).GetOrders), req)
}

// GetOrdersCSV mocks base method.
func (m *MockOrderFillClient) GetOrdersCSV(req *api.GetOrdersCSVRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersCSV", req)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersCSV indicates an expected call of GetOrdersCSV.
func (mr *MockOrderFillClientMockRecorder) GetOrdersCSV(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersCSV", reflect.TypeOf((*MockOrderFillClient)(nil).GetOrdersCSV), req)
}
