// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/yangnei/enclave-go/enclave/client (interfaces: PerpsClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "github.com/yangnei/enclave-go/enclave/api"
	model "github.com/yangnei/enclave-go/enclave/model"
)

// MockPerpsClient is a mock of PerpsClient interface.
type MockPerpsClient struct {
	ctrl     *gomock.Controller
	recorder *MockPerpsClientMockRecorder
}

// MockPerpsClientMockRecorder is the mock recorder for MockPerpsClient.
type MockPerpsClientMockRecorder struct {
	mock *MockPerpsClient
}

// NewMockPerpsClient creates a new mock instance.
func NewMockPerpsClient(ctrl *gomock.Controller) *MockPerpsClient {
	mock := &MockPerpsClient{ctrl: ctrl}
	mock.recorder = &MockPerpsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPerpsClient) EXPECT() *MockPerpsClientMockRecorder {
	return m.recorder
}

// AddOrder mocks base method.
func (m *MockPerpsClient) AddOrder(arg0 *api.AddOrderRequest) (*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrder", arg0)
	ret0, _ := ret[0].(*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddOrder indicates an expected call of AddOrder.
func (mr *MockPerpsClientMockRecorder) AddOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrder", reflect.TypeOf((*MockPerpsClient)(nil).AddOrder), arg0)
}

// CancelOrder mocks base method.
func (m *MockPerpsClient) CancelOrder(arg0 *api.CancelOrderRequest) (*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelOrder", arg0)
	ret0, _ := ret[0].(*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelOrder indicates an expected call of CancelOrder.
func (mr *MockPerpsClientMockRecorder) CancelOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelOrder", reflect.TypeOf((*MockPerpsClient)(nil).CancelOrder), arg0)
}

// CancelOrders mocks base method.
func (m *MockPerpsClient) CancelOrders(arg0 *api.CancelOrdersRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelOrders", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelOrders indicates an expected call of CancelOrders.
func (mr *MockPerpsClientMockRecorder) CancelOrders(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelOrders", reflect.TypeOf((*MockPerpsClient)(nil).CancelOrders), arg0)
}

// GetBalance mocks base method.
func (m *MockPerpsClient) GetBalance() (*model.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance")
	ret0, _ := ret[0].(*model.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockPerpsClientMockRecorder) GetBalance() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockPerpsClient)(nil).GetBalance))
}

// GetDepth mocks base method.
func (m *MockPerpsClient) GetDepth(arg0 *api.GetDepthRequest) (*model.OrderBook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDepth", arg0)
	ret0, _ := ret[0].(*model.OrderBook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDepth indicates an expected call of GetDepth.
func (mr *MockPerpsClientMockRecorder) GetDepth(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDepth", reflect.TypeOf((*MockPerpsClient)(nil).GetDepth), arg0)
}

// GetFills mocks base method.
func (m *MockPerpsClient) GetFills(arg0 *api.GetFillsRequest) ([]*model.Fill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFills", arg0)
	ret0, _ := ret[0].([]*model.Fill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFills indicates an expected call of GetFills.
func (mr *MockPerpsClientMockRecorder) GetFills(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFills", reflect.TypeOf((*MockPerpsClient)(nil).GetFills), arg0)
}

// GetFillsByID mocks base method.
func (m *MockPerpsClient) GetFillsByID(arg0 *api.GetFillsByIDRequest) ([]*model.Fill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFillsByID", arg0)
	ret0, _ := ret[0].([]*model.Fill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFillsByID indicates an expected call of GetFillsByID.
func (mr *MockPerpsClientMockRecorder) GetFillsByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFillsByID", reflect.TypeOf((*MockPerpsClient)(nil).GetFillsByID), arg0)
}

// GetFillsCSV mocks base method.
func (m *MockPerpsClient) GetFillsCSV(arg0 *api.GetFillsCSVRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFillsCSV", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFillsCSV indicates an expected call of GetFillsCSV.
func (mr *MockPerpsClientMockRecorder) GetFillsCSV(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFillsCSV", reflect.TypeOf((*MockPerpsClient)(nil).GetFillsCSV), arg0)
}

// GetFundingRateHistory mocks base method.
func (m *MockPerpsClient) GetFundingRateHistory(arg0 *api.GetFundingRateHistoryRequest) ([]*model.FundingRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFundingRateHistory", arg0)
	ret0, _ := ret[0].([]*model.FundingRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFundingRateHistory indicates an expected call of GetFundingRateHistory.
func (mr *MockPerpsClientMockRecorder) GetFundingRateHistory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFundingRateHistory", reflect.TypeOf((*MockPerpsClient)(nil).GetFundingRateHistory), arg0)
}

// GetFundingRates mocks base method.
func (m *MockPerpsClient) GetFundingRates(arg0 *api.GetFundingRatesRequest) (*model.FundingRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFundingRates", arg0)
	ret0, _ := ret[0].(*model.FundingRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFundingRates indicates an expected call of GetFundingRates.
func (mr *MockPerpsClientMockRecorder) GetFundingRates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFundingRates", reflect.TypeOf((*MockPerpsClient)(nil).GetFundingRates), arg0)
}

// GetMarkPrices mocks base method.
func (m *MockPerpsClient) GetMarkPrices() (map[string]*model.MarkPrice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMarkPrices")
	ret0, _ := ret[0].(map[string]*model.MarkPrice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMarkPrices indicates an expected call of GetMarkPrices.
func (mr *MockPerpsClientMockRecorder) GetMarkPrices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMarkPrices", reflect.TypeOf((*MockPerpsClient)(nil).GetMarkPrices))
}

// GetOpenInterest mocks base method.
func (m *MockPerpsClient) GetOpenInterest() ([]*model.OpenInterest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpenInterest")
	ret0, _ := ret[0].([]*model.OpenInterest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOpenInterest indicates an expected call of GetOpenInterest.
func (mr *MockPerpsClientMockRecorder) GetOpenInterest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenInterest", reflect.TypeOf((*MockPerpsClient)(nil).GetOpenInterest))
}

// GetOrder mocks base method.
func (m *MockPerpsClient) GetOrder(arg0 *api.GetOrderRequest) (*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", arg0)
	ret0, _ := ret[0].(*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockPerpsClientMockRecorder) GetOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockPerpsClient)(nil).GetOrder), arg0)
}

// GetOrders mocks base method.
func (m *MockPerpsClient) GetOrders(arg0 *api.GetOrdersRequest) (*api.GetOrdersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", arg0)
	ret0, _ := ret[0].(*api.GetOrdersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockPerpsClientMockRecorder) GetOrders(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockPerpsClient)(nil).GetOrders), arg0)
}

// GetOrdersCSV mocks base method.
func (m *MockPerpsClient) GetOrdersCSV(arg0 *api.GetOrdersCSVRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersCSV", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersCSV indicates an expected call of GetOrdersCSV.
func (mr *MockPerpsClientMockRecorder) GetOrdersCSV(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersCSV", reflect.TypeOf((*MockPerpsClient)(nil).GetOrdersCSV), arg0)
}

// GetPositions mocks base method.
func (m *MockPerpsClient) GetPositions() ([]*model.Position, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPositions")
	ret0, _ := ret[0].([]*model.Position)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPositions indicates an expected call of GetPositions.
func (mr *MockPerpsClientMockRecorder) GetPositions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPositions", reflect.TypeOf((*MockPerpsClient)(nil).GetPositions))
}

// GetStopOrders mocks base method.
func (m *MockPerpsClient) GetStopOrders() ([]*model.StopOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStopOrders")
	ret0, _ := ret[0].([]*model.StopOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStopOrders indicates an expected call of GetStopOrders.
func (mr *MockPerpsClientMockRecorder) GetStopOrders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStopOrders", reflect.TypeOf((*MockPerpsClient)(nil).GetStopOrders))
}

// GetTransfers mocks base method.
func (m *MockPerpsClient) GetTransfers(arg0 *api.GetTransferRequest) ([]*model.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransfers", arg0)
	ret0, _ := ret[0].([]*model.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransfers indicates an expected call of GetTransfers.
func (mr *MockPerpsClientMockRecorder) GetTransfers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransfers", reflect.TypeOf((*MockPerpsClient)(nil).GetTransfers), arg0)
}

// GetVolume mocks base method.
func (m *MockPerpsClient) GetVolume() ([]*model.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolume")
	ret0, _ := ret[0].([]*model.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolume indicates an expected call of GetVolume.
func (mr *MockPerpsClientMockRecorder) GetVolume() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolume", reflect.TypeOf((*MockPerpsClient)(nil).GetVolume))
}

// RemoveStopOrder mocks base method.
func (m *MockPerpsClient) RemoveStopOrder(arg0 *api.RemoveStopOrderRequest) ([]*model.StopOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveStopOrder", arg0)
	ret0, _ := ret[0].([]*model.StopOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveStopOrder indicates an expected call of RemoveStopOrder.
func (mr *MockPerpsClientMockRecorder) RemoveStopOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveStopOrder", reflect.TypeOf((*MockPerpsClient)(nil).RemoveStopOrder), arg0)
}

// SetStopOrder mocks base method.
func (m *MockPerpsClient) SetStopOrder(arg0 *api.SetStopOrderRequest) ([]*model.StopOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStopOrder", arg0)
	ret0, _ := ret[0].([]*model.StopOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetStopOrder indicates an expected call of SetStopOrder.
func (mr *MockPerpsClientMockRecorder) SetStopOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStopOrder", reflect.TypeOf((*MockPerpsClient)(nil).SetStopOrder), arg0)
}

// Transfer mocks base method.
func (m *MockPerpsClient) Transfer(arg0 *api.TransferRequest) (*model.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", arg0)
	ret0, _ := ret[0].(*model.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transfer indicates an expected call of Transfer.
func (mr *MockPerpsClientMockRecorder) Transfer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockPerpsClient)(nil).Transfer), arg0)
}
