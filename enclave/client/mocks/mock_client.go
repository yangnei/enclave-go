// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/yangnei/enclave-go/enclave/client (interfaces: Client)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "github.com/yangnei/enclave-go/enclave/api"
	client "github.com/yangnei/enclave-go/enclave/client"
	model "github.com/yangnei/enclave-go/enclave/model"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// AuthenticatedHello mocks base method.
func (m *MockClient) AuthenticatedHello() (*model.AuthenticatedHello, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthenticatedHello")
	ret0, _ := ret[0].(*model.AuthenticatedHello)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthenticatedHello indicates an expected call of AuthenticatedHello.
func (mr *MockClientMockRecorder) AuthenticatedHello() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticatedHello", reflect.TypeOf((*MockClient)(nil).AuthenticatedHello))
}

// GetAccount mocks base method.
func (m *MockClient) GetAccount() (*model.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount")
	ret0, _ := ret[0].(*model.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockClientMockRecorder) GetAccount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockClient)(nil).GetAccount))
}

// GetAddressBook mocks base method.
func (m *MockClient) GetAddressBook() (*model.AddressBook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddressBook")
	ret0, _ := ret[0].(*model.AddressBook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddressBook indicates an expected call of GetAddressBook.
func (mr *MockClientMockRecorder) GetAddressBook() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddressBook", reflect.TypeOf((*MockClient)(nil).GetAddressBook))
}

// GetAssetBalance mocks base method.
func (m *MockClient) GetAssetBalance(arg0 *api.GetAssetBalanceRequest) (*model.AssetBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssetBalance", arg0)
	ret0, _ := ret[0].(*model.AssetBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssetBalance indicates an expected call of GetAssetBalance.
func (mr *MockClientMockRecorder) GetAssetBalance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetBalance", reflect.TypeOf((*MockClient)(nil).GetAssetBalance), arg0)
}

// GetAssetBalances mocks base method.
func (m *MockClient) GetAssetBalances() ([]*model.AssetBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssetBalances")
	ret0, _ := ret[0].([]*model.AssetBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssetBalances indicates an expected call of GetAssetBalances.
func (mr *MockClientMockRecorder) GetAssetBalances() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetBalances", reflect.TypeOf((*MockClient)(nil).GetAssetBalances))
}

// GetDeposit mocks base method.
func (m *MockClient) GetDeposit(arg0 *api.GetDepositRequest) (*model.Deposit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeposit", arg0)
	ret0, _ := ret[0].(*model.Deposit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeposit indicates an expected call of GetDeposit.
func (mr *MockClientMockRecorder) GetDeposit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeposit", reflect.TypeOf((*MockClient)(nil).GetDeposit), arg0)
}

// GetDepositAddresses mocks base method.
func (m *MockClient) GetDepositAddresses(arg0 *api.GetDepositAddressesRequest) ([]*model.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDepositAddresses", arg0)
	ret0, _ := ret[0].([]*model.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDepositAddresses indicates an expected call of GetDepositAddresses.
func (mr *MockClientMockRecorder) GetDepositAddresses(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDepositAddresses", reflect.TypeOf((*MockClient)(nil).GetDepositAddresses), arg0)
}

// GetDeposits mocks base method.
func (m *MockClient) GetDeposits() ([]*model.Deposit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeposits")
	ret0, _ := ret[0].([]*model.Deposit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeposits indicates an expected call of GetDeposits.
func (mr *MockClientMockRecorder) GetDeposits() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeposits", reflect.TypeOf((*MockClient)(nil).GetDeposits))
}

// GetDepositsCSV mocks base method.
func (m *MockClient) GetDepositsCSV(arg0 *api.GetDepositsCSVRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDepositsCSV", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDepositsCSV indicates an expected call of GetDepositsCSV.
func (mr *MockClientMockRecorder) GetDepositsCSV(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDepositsCSV", reflect.TypeOf((*MockClient)(nil).GetDepositsCSV), arg0)
}

// GetMarkets mocks base method.
func (m *MockClient) GetMarkets() (*model.Market, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMarkets")
	ret0, _ := ret[0].(*model.Market)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMarkets indicates an expected call of GetMarkets.
func (mr *MockClientMockRecorder) GetMarkets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMarkets", reflect.TypeOf((*MockClient)(nil).GetMarkets))
}

// GetWithdrawal mocks base method.
func (m *MockClient) GetWithdrawal() (*model.Withdrawal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawal")
	ret0, _ := ret[0].(*model.Withdrawal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawal indicates an expected call of GetWithdrawal.
func (mr *MockClientMockRecorder) GetWithdrawal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawal", reflect.TypeOf((*MockClient)(nil).GetWithdrawal))
}

// GetWithdrawalByTxId mocks base method.
func (m *MockClient) GetWithdrawalByTxId(arg0 *api.GetWithdrawalByTxIdRequest) (*model.Withdrawal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawalByTxId", arg0)
	ret0, _ := ret[0].(*model.Withdrawal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawalByTxId indicates an expected call of GetWithdrawalByTxId.
func (mr *MockClientMockRecorder) GetWithdrawalByTxId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawalByTxId", reflect.TypeOf((*MockClient)(nil).GetWithdrawalByTxId), arg0)
}

// GetWithdrawalLimit mocks base method.
func (m *MockClient) GetWithdrawalLimit() (*model.WithdrawalLimit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawalLimit")
	ret0, _ := ret[0].(*model.WithdrawalLimit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawalLimit indicates an expected call of GetWithdrawalLimit.
func (mr *MockClientMockRecorder) GetWithdrawalLimit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawalLimit", reflect.TypeOf((*MockClient)(nil).GetWithdrawalLimit))
}

// GetWithdrawalStatus mocks base method.
func (m *MockClient) GetWithdrawalStatus(arg0 *api.GetWithdrawalStatusRequest) (*model.WithdrawalStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawalStatus", arg0)
	ret0, _ := ret[0].(*model.WithdrawalStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawalStatus indicates an expected call of GetWithdrawalStatus.
func (mr *MockClientMockRecorder) GetWithdrawalStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawalStatus", reflect.TypeOf((*MockClient)(nil).GetWithdrawalStatus), arg0)
}

// GetWithdrawals mocks base method.
func (m *MockClient) GetWithdrawals() ([]*model.Withdrawal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawals")
	ret0, _ := ret[0].([]*model.Withdrawal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawals indicates an expected call of GetWithdrawals.
func (mr *MockClientMockRecorder) GetWithdrawals() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawals", reflect.TypeOf((*MockClient)(nil).GetWithdrawals))
}

// GetWithdrawalsCSV mocks base method.
func (m *MockClient) GetWithdrawalsCSV(arg0 *api.GetWithdrawalsCSVRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawalsCSV", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawalsCSV indicates an expected call of GetWithdrawalsCSV.
func (mr *MockClientMockRecorder) GetWithdrawalsCSV(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawalsCSV", reflect.TypeOf((*MockClient)(nil).GetWithdrawalsCSV), arg0)
}

// Hello mocks base method.
func (m *MockClient) Hello() (*model.Hello, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hello")
	ret0, _ := ret[0].(*model.Hello)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hello indicates an expected call of Hello.
func (mr *MockClientMockRecorder) Hello() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hello", reflect.TypeOf((*MockClient)(nil).Hello))
}

// PerpsClient mocks base method.
func (m *MockClient) PerpsClient() client.PerpsClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PerpsClient")
	ret0, _ := ret[0].(client.PerpsClient)
	return ret0
}

// PerpsClient indicates an expected call of PerpsClient.
func (mr *MockClientMockRecorder) PerpsClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PerpsClient", reflect.TypeOf((*MockClient)(nil).PerpsClient))
}

// ProvisionAddress mocks base method.
func (m *MockClient) ProvisionAddress(arg0 *api.ProvisionAddressRequest) (*model.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProvisionAddress", arg0)
	ret0, _ := ret[0].(*model.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProvisionAddress indicates an expected call of ProvisionAddress.
func (mr *MockClientMockRecorder) ProvisionAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProvisionAddress", reflect.TypeOf((*MockClient)(nil).ProvisionAddress), arg0)
}

// SpotClient mocks base method.
func (m *MockClient) SpotClient() client.SpotClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpotClient")
	ret0, _ := ret[0].(client.SpotClient)
	return ret0
}

// SpotClient indicates an expected call of SpotClient.
func (mr *MockClientMockRecorder) SpotClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpotClient", reflect.TypeOf((*MockClient)(nil).SpotClient))
}

// Withdraw mocks base method.
func (m *MockClient) Withdraw(arg0 *api.WithdrawRequest) (*model.NewWithdrawal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", arg0)
	ret0, _ := ret[0].(*model.NewWithdrawal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Withdraw indicates an expected call of Withdraw.
func (mr *MockClientMockRecorder) Withdraw(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockClient)(nil).Withdraw), arg0)
}
